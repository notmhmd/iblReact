import {
  resolveSxValue
} from "./chunk-VB3GHPPD.js";
import {
  useSlot
} from "./chunk-ZPJXK56S.js";
import {
  styled_default,
  useThemeProps
} from "./chunk-DZ6CTYGR.js";
import {
  generateUtilityClass,
  generateUtilityClasses
} from "./chunk-RSDJQATZ.js";
import {
  _objectWithoutPropertiesLoose,
  capitalize,
  clsx_default,
  composeClasses,
  css,
  init_clsx,
  init_esm,
  init_esm2,
  init_objectWithoutPropertiesLoose,
  keyframes,
  require_prop_types
} from "./chunk-LAROEKPB.js";
import {
  _extends,
  init_extends
} from "./chunk-5FDQUWYF.js";
import {
  require_jsx_runtime
} from "./chunk-HSESELKR.js";
import {
  __toESM,
  require_react
} from "./chunk-YJNMHHGL.js";

// node_modules/@mui/joy/LinearProgress/LinearProgress.js
init_objectWithoutPropertiesLoose();
init_extends();
var React = __toESM(require_react());
var import_prop_types = __toESM(require_prop_types());
init_clsx();
init_esm();
init_esm2();

// node_modules/@mui/joy/LinearProgress/linearProgressClasses.js
function getLinearProgressUtilityClass(slot) {
  return generateUtilityClass("MuiLinearProgress", slot);
}
var linearProgressClasses = generateUtilityClasses("MuiLinearProgress", ["root", "determinate", "colorPrimary", "colorNeutral", "colorDanger", "colorSuccess", "colorWarning", "colorContext", "sizeSm", "sizeMd", "sizeLg", "variantPlain", "variantOutlined", "variantSoft", "variantSolid"]);
var linearProgressClasses_default = linearProgressClasses;

// node_modules/@mui/joy/LinearProgress/LinearProgress.js
var import_jsx_runtime = __toESM(require_jsx_runtime());
var _excluded = ["children", "className", "component", "color", "size", "variant", "thickness", "determinate", "value", "style", "slots", "slotProps"];
var _ = (t) => t;
var _t;
var _t2;
var progressKeyframe = keyframes(_t || (_t = _`
  0% {
    left: var(--_LinearProgress-progressInset);
    width: var(--LinearProgress-progressMinWidth);
  }

  25% {
    width: var(--LinearProgress-progressMaxWidth);
  }

  50% {
    left: var(--_LinearProgress-progressLeft);
    width: var(--LinearProgress-progressMinWidth);
  }

  75% {
    width: var(--LinearProgress-progressMaxWidth);
  }

  100% {
    left: var(--_LinearProgress-progressInset);
    width: var(--LinearProgress-progressMinWidth);
  }
`));
var useUtilityClasses = (ownerState) => {
  const {
    determinate,
    color,
    variant,
    size
  } = ownerState;
  const slots = {
    root: ["root", determinate && "determinate", color && `color${capitalize(color)}`, variant && `variant${capitalize(variant)}`, size && `size${capitalize(size)}`]
  };
  return composeClasses(slots, getLinearProgressUtilityClass, {});
};
var LinearProgressRoot = styled_default("div", {
  name: "JoyLinearProgress",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  ownerState,
  theme
}) => {
  var _theme$variants, _theme$variants$solid, _theme$variants$softH, _theme$variants$solid2;
  return _extends({
    // public variables
    "--LinearProgress-radius": "var(--LinearProgress-thickness)",
    "--LinearProgress-progressThickness": "var(--LinearProgress-thickness)",
    "--LinearProgress-progressRadius": "max(var(--LinearProgress-radius) - var(--_LinearProgress-padding), min(var(--_LinearProgress-padding) / 2, var(--LinearProgress-radius) / 2))"
  }, ownerState.size === "sm" && {
    "--LinearProgress-thickness": "4px"
  }, ownerState.size === "md" && {
    "--LinearProgress-thickness": "6px"
  }, ownerState.size === "lg" && {
    "--LinearProgress-thickness": "8px"
  }, ownerState.thickness && {
    "--LinearProgress-thickness": `${ownerState.thickness}px`
  }, !ownerState.determinate && {
    "--LinearProgress-progressMinWidth": "calc(var(--LinearProgress-percent) * 1% / 2)",
    "--LinearProgress-progressMaxWidth": "calc(var(--LinearProgress-percent) * 1%)",
    "--_LinearProgress-progressLeft": "calc(100% - var(--LinearProgress-progressMinWidth) - var(--_LinearProgress-progressInset))",
    "--_LinearProgress-progressInset": "calc(var(--LinearProgress-thickness) / 2 - var(--LinearProgress-progressThickness) / 2)"
  }, {
    minBlockSize: "var(--LinearProgress-thickness)",
    boxSizing: "border-box",
    borderRadius: "var(--LinearProgress-radius)",
    display: "flex",
    justifyContent: "center",
    alignItems: "center",
    flex: 1,
    padding: "var(--_LinearProgress-padding)",
    position: "relative"
  }, (_theme$variants = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants[ownerState.color], {
    "--_LinearProgress-padding": "max((var(--LinearProgress-thickness) - 2 * var(--variant-borderWidth, 0px) - var(--LinearProgress-progressThickness)) / 2, 0px)",
    "&::before": {
      content: '""',
      display: "block",
      boxSizing: "inherit",
      blockSize: "var(--LinearProgress-progressThickness)",
      borderRadius: "var(--LinearProgress-progressRadius)",
      backgroundColor: "currentColor",
      color: "inherit",
      position: "absolute"
      // required to make `left` animation works.
    }
  }, ownerState.variant === "soft" && {
    backgroundColor: theme.variants.soft.neutral.backgroundColor,
    color: (_theme$variants$solid = theme.variants.solid) == null ? void 0 : _theme$variants$solid[ownerState.color].backgroundColor
  }, ownerState.variant === "solid" && {
    backgroundColor: (_theme$variants$softH = theme.variants.softHover) == null ? void 0 : _theme$variants$softH[ownerState.color].backgroundColor,
    color: (_theme$variants$solid2 = theme.variants.solid) == null ? void 0 : _theme$variants$solid2[ownerState.color].backgroundColor
  });
}, ({
  ownerState
}) => ownerState.determinate ? {
  "&::before": {
    left: "var(--_LinearProgress-padding)",
    inlineSize: "calc(var(--LinearProgress-percent) * 1% - 2 * var(--_LinearProgress-padding))"
  }
} : css(_t2 || (_t2 = _`
          &::before {
            animation: ${0}
              var(--LinearProgress-circulation, 2.5s ease-in-out 0s infinite normal none running);
          }
        `), progressKeyframe), ({
  ownerState,
  theme
}) => {
  const {
    borderRadius,
    height
  } = resolveSxValue({
    theme,
    ownerState
  }, ["borderRadius", "height"]);
  return _extends({}, borderRadius !== void 0 && {
    "--LinearProgress-radius": borderRadius
  }, height !== void 0 && {
    "--LinearProgress-thickness": height
  });
});
var LinearProgress = React.forwardRef(function LinearProgress2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyLinearProgress"
  });
  const {
    children,
    className,
    component,
    color = "primary",
    size = "md",
    variant = "soft",
    thickness,
    determinate = false,
    value = determinate ? 0 : 25,
    // `25` is the 1/4 of the bar.
    style,
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded);
  const ownerState = _extends({}, props, {
    component,
    color,
    size,
    variant,
    thickness,
    value,
    determinate,
    instanceSize: inProps.size
  });
  const classes = useUtilityClasses(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: clsx_default(classes.root, className),
    elementType: LinearProgressRoot,
    externalForwardedProps,
    ownerState,
    additionalProps: _extends({
      as: component,
      role: "progressbar",
      style: _extends({}, {
        "--LinearProgress-percent": value
      }, style)
    }, typeof value === "number" && determinate && {
      "aria-valuenow": Math.round(value)
    })
  });
  return (0, import_jsx_runtime.jsx)(SlotRoot, _extends({}, rootProps, {
    children
  }));
});
true ? LinearProgress.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  children: import_prop_types.default.node,
  /**
   * @ignore
   */
  className: import_prop_types.default.string,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'primary'
   */
  color: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["danger", "neutral", "primary", "success", "warning"]), import_prop_types.default.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types.default.elementType,
  /**
   * The boolean to select a variant.
   * Use indeterminate when there is no progress value.
   * @default false
   */
  determinate: import_prop_types.default.bool,
  /**
   * The size of the component.
   * It accepts theme values between 'sm' and 'lg'.
   * @default 'md'
   */
  size: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["sm", "md", "lg"]), import_prop_types.default.string]),
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types.default.shape({
    root: import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types.default.shape({
    root: import_prop_types.default.elementType
  }),
  /**
   * @ignore
   */
  style: import_prop_types.default.object,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types.default.oneOfType([import_prop_types.default.arrayOf(import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object, import_prop_types.default.bool])), import_prop_types.default.func, import_prop_types.default.object]),
  /**
   * The thickness of the bar.
   */
  thickness: import_prop_types.default.number,
  /**
   * The value of the progress indicator for the determinate variant.
   * Value between 0 and 100.
   *
   * @default determinate ? 0 : 25
   */
  value: import_prop_types.default.number,
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'soft'
   */
  variant: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types.default.string])
} : void 0;
var LinearProgress_default = LinearProgress;

export {
  getLinearProgressUtilityClass,
  linearProgressClasses_default,
  LinearProgress_default
};
//# sourceMappingURL=chunk-VDCNPD6I.js.map
